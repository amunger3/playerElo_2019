(1+sqrt(5))/2 # golden ratio
2^3
log(2.718281828)
round(2.718281828,3)
# combine things together with c()
c(1,2,3,4,5)
c(1,2,3,4,5)+1
c(1,2,3,4,5)*2
c("CRIM601","CRIM602","CRIM603")
c("yes","no","no",NA,NA,"yes")
# making sequences
1:10
c(1,1,1,1,1,1,1,1,1,1)
rep(1,10)
rep(c(1,2),each=5)
# pairwise addition
1:10 + 2:11
# functions of vector of numbers
#   some functions apply to each element
sqrt(c(1,10,3,6,2,5,8,4,7,9))
(c(1,10,3,6,2,5,8,4,7,9))^2
abs(c(-1,1,-2,2,-3,3))
#   other functions operate on the collection
#   sum
sum(c(1,10,3,6,2,5,8,4,7,9))
#   how many?
length(c(1,10,3,6,2,5,8,4,7,9))
#   cumulative sum
cumsum(c(1,10,3,6,2,5,8,4,7,9))
#   other statistics
mean(c(1,10,3,6,2,5,8,4,7,9))
median(c(1,10,3,6,2,5,8,4,7,9))
var(c(1,10,3,6,2,5,8,4,7,9))
sd(c(1,10,3,6,2,5,8,4,7,9))
# biggest and smallest
max(c(1,10,3,6,2,5,8,4,7,9))
which.max(c(1,10,3,6,2,5,8,4,7,9))
min(c(1,10,3,6,2,5,8,4,7,9))
which.min(c(1,10,3,6,2,5,8,4,7,9))
#   sorting
sort(c(1,10,3,6,2,5,8,4,7,9))
rev(c(1,10,3,6,2,5,8,4,7,9))
rev(sort(c(1,10,3,6,2,5,8,4,7,9)))
sort(c(1,10,3,6,2,5,8,4,7,9),decreasing=TRUE)
#   where is the ith biggest number?
order(c(1,10,3,6,2,5,8,4,7,9))
#   how do I rank compared to others?
rank(c(1,100,3,20))
#  functions work on character strings
my.states <- c("WA","DC","CA","PA","MD","VA","OH")
nchar(my.states)
paste(my.states,", USA")
paste(my.states,", USA",sep="")
paste(my.states, collapse=",")
Class exercises
1. Print all even numbers less than 100
2. What is the standard deviation of even numbers less than 100
3. Have R put in alphabetical order
c("WA","DC","CA","PA","MD","VA","OH")
# assignment
a <- 1
b <- 2+2
a <- a+b
a <- 1:10
b <- 2*a
a+b
sd(a)
state.names <- c("WV","OH","OK","NV","CA","IN","MA","MI","IL","IA","SC","NH",
"LA","GA","CT","WI","CO","NY","UT","AK","MS","AL","OR","MT",
"ND","WY","FL","ME","AZ","TN","PA","MN","NM","SD","MO","RI",
"HI","WA","DE","NJ","NE","KY","AR","TX","NC","MD","VA","VT",
"KS","ID","DC")
# indexing
state.names[1]
state.names[1:3]
state.names[c(1,5,9)]
state.names[2*(1:25)]
#   negative indices drop the element
state.names[-51]
sort(state.names)[1]
i <- order(state.names)
i[1:3]
state.names[i[1:3]]
Class exercises
1. What's the last state in the list?
2. Pick out states that begin with "M" using their indices
3. Pick out states where you have lived.
4. What's the last state in alphabetical order?
5. What are the last three states in alphabetical order?
# boolean
TRUE
FALSE
c(TRUE,FALSE,TRUE,FALSE)
TRUE  && TRUE
FALSE && TRUE
FALSE || TRUE
FALSE || FALSE
6>5
(6>5) || (100<3)
(6>5) && (100<3)
a <- 1:10
a==5
a!=5  # ! means "not"
a<5
a>=5
13 %% 5  # = 3, 13/5 = 2 with remainder 3
a%%2==0
a>5 & a<8  # & means "and"   IMPORTANT use single & or | for vectors
a<3 | a>=7 # | means "or"    otherwise just compares the first values
#  all/any checks whether all/any are TRUE
all(a<11)
all(a>5 & a<8)
any(a>5 & a<8)
#   use booleans for indexing too
i <- a%%2==0
a[i]
#   ! means "not"
a[!i]
i <- state.names!="DC"
state.names[i]
state.names[state.names!="DC"]
#  %in% tests whether something is in a set
a %in% c(3,7,10)
my.states <- c("MD","OH","VA","CA","WA","DC","PA")
i <- state.names %in% my.states
sum(i)
sum(i)==length(my.states)
my.states
state.names
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names[state.names == "WA"]
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names[state.names == "WA"]
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names %in% c("WA")
# 2. With a<-1:100, pick out odd numbers between 50 and 75
a <- 1:100
b <- (a % 2 != 0) && a > 50 && a < 75
b <- a > 50
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names == "WA"
b <- b[a > 50]
a[which(a %% 2 != 0)]
a[which((a %% 2 != 0) && a > 50 && a < 75)]
a[which((a %% 2 != 0) && a > 50)]
a[which((a %% 2 != 0) & a > 50)]
a[which((a %% 2 != 0) & a > 50 & a < 75)]
# Classroom exercises
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names == "WA"
a[a > 50 & a < 75]
a[a > 50 & a < 75 & (a %% 2 == 1)]
library(tidyverse)
library(data.table)
setwd("~/Desktop/Jacob/Personal_R/playerElo")
# load previously calculated park factors
parkFactors <- read_csv("data/ParkFactors.csv")
# load calculated ending playerElos for 2018
b18Elo <- read_csv("data/b18Elo.csv") %>%
mutate(player_id = as.character(player_id))
p18Elo <- read_csv("data/p18Elo.csv") %>%
mutate(player_id = as.character(player_id))
# load matrix of previously calculated quadratic coefficients to be used in playerElo calculations
stateMatrix <- read.csv("data/stateMatrix.csv")
pbp.compile <- function(data) {
data <- data[-(1:2),
][ ,c("V1","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27",
"V28","V29","V30","V31","V32","V33","V34","V35","V45"):=NULL]
names(data) <- c("GameID", "Date", "Inning", "Road_Score", "Home_Score",
"Batting_Team", "Batter", "Batter_MLB_ID", "Batter_Hand",
"Runner1B", "Runner2B", "Runner3B", "Pitching_Team",
"Pitcher", "Pitcher_MLB_ID", "Pitcher_Hand", "Play_Type",
"Runs_OnPlay", "Outs_OnPlay", "SB", "CS", "FC", "PB", "WP", "Description")
# remove all plays in which there is not a batted ball event
data <- data[Play_Type != '' & Play_Type != 'CATCHER INTERFERENCE' & Play_Type != 'FAN INTERFERENCE']
# correct instances of inaccurate scoring
data$Outs_OnPlay[1195] <- '2'
data$Play_Type[1961] <- 'FIELD ERROR'
data$Outs_OnPlay[1961] <- ''
data$Play_Type[7307] <- 'FIELD ERROR'
data$Outs_OnPlay[7307] <- ''
data$Play_Type[7475] <- 'FIELD ERROR'
data$Outs_OnPlay[7475] <- ''
data$Outs_OnPlay[9467] <- '2'
return(data)
}
# compute run value of every play (inspired by work of Jim Albert and Max Marchi)
compute.runs.value <- function(data) {
data[, c('Road_Score','Home_Score','Runs_OnPlay','Outs_OnPlay') := lapply(.SD, as.numeric),
.SDcols = c('Road_Score','Home_Score','Runs_OnPlay','Outs_OnPlay')
][, c('Runs_OnPlay','Outs_OnPlay') := lapply(.SD, function(x){ifelse(is.na(x), 0, x)}),
.SDcols = c('Runs_OnPlay','Outs_OnPlay')
]
data[, Outs_Before := cumsum(Outs_OnPlay) - Outs_OnPlay, by = .(GameID, Inning)
][, Outs_After := Outs_Before + Outs_OnPlay]
cols <- c("Runner1B","Runner2B","Runner3B")
anscols <- paste(cols, "After", sep="_")
data[, (anscols) := shift(.SD, 1, 0, "lead"), .SDcols=cols]
get.state <- function(runner1, runner2, runner3, outs) {
runners <- paste(runner1, runner2, runner3, sep = "")
paste(runners, outs)
}
RUNNER1 <- ifelse(as.character(data[, Runner1B]) == "", 0, 1)
RUNNER2 <- ifelse(as.character(data[, Runner2B]) == "", 0, 1)
RUNNER3 <- ifelse(as.character(data[, Runner3B]) == "", 0, 1)
NRUNNER1 <- ifelse(as.character(data[, Runner1B_After]) == "", 0, 1)
NRUNNER2 <- ifelse(as.character(data[, Runner2B_After]) == "", 0, 1)
NRUNNER3 <- ifelse(as.character(data[, Runner3B_After]) == "", 0, 1)
data[, State_Before := get.state(RUNNER1, RUNNER2, RUNNER3, Outs_Before)
][, State_After := get.state(NRUNNER1, NRUNNER2, NRUNNER3, Outs_After)]
RE = data.table(
STATE = c("000 0", "000 1", "000 2", "001 0", "001 1", "001 2",
"010 0", "010 1", "010 2", "011 0", "011 1", "011 2",
"100 0", "100 1", "100 2", "101 0", "101 1", "101 2",
"110 0", "110 1", "110 2", "111 0", "111 1", "111 2"),
EX.RUNS = c(.5075024, 0.2713679, 0.1053122, 1.3891213, 0.9728302, 0.3566315,
1.1492537, 0.6856786, 0.3229104, 1.9654296, 1.4041317, 0.5583602,
0.8786512, 0.5246762, 0.2233199, 1.7736422, 1.1971584, 0.4843450,
1.4476052, 0.9289954, 0.4378484, 2.2099367, 1.5406000, 0.7514162)
)
data[RE, on =c("State_Before" = "STATE"), RE_State := EX.RUNS
][RE, on =c("State_After" = "STATE"), RE_NewState := EX.RUNS
][, c('RE_State','RE_NewState') := lapply(.SD, function(x){ifelse(is.na(x), 0, x)}),
.SDcols = c('RE_State','RE_NewState')
][, Runs_Value := RE_NewState - RE_State + Runs_OnPlay]
}
RE19 <- fread("data/09-04-2019-mlb-season-pbp-feed.csv")
RE19 <- pbp.compile(RE19)
RE19 <- compute.runs.value(RE19)
teamsIso19b <- RE19 %>%
select(Batting_Team, Batter_MLB_ID, Date) %>%
arrange(desc(Date)) %>%
distinct(Batter_MLB_ID, .keep_all = TRUE)
teamsIso19p <- RE19 %>%
select(Pitching_Team, Pitcher_MLB_ID, Date) %>%
arrange(desc(Date)) %>%
distinct(Pitcher_MLB_ID, .keep_all = TRUE)
View(stateMatrix)
View(teamsIso19b)
b19 <- read_csv("data/expected_stats-6.csv") %>%
mutate(player_id = as.character(player_id)) %>%
left_join(teamsIso19b, by = c("player_id" = "Batter_MLB_ID")) %>%
select(first_name, last_name, year, Batting_Team, everything())
p19 <- read_csv("data/expected_stats-7.csv") %>%
mutate(player_id = as.character(player_id)) %>%
left_join(teamsIso19p, by = c("player_id" = "Pitcher_MLB_ID")) %>%
select(first_name, last_name, year, Pitching_Team, everything())
View(b19)
RE19Home <- filter(RE19, substr(Inning, 2, 2) == 'B')
RE19Away <- filter(RE19, substr(Inning, 2, 2) == 'T')
homeAdv <- mean(RE19Home$Runs_Value) - mean(RE19Away$Runs_Value)
b19Elo <- data.frame(player_id = unique(RE19$Batter_MLB_ID)) %>%
mutate(player_id = as.character(player_id)) %>%
left_join(b18Elo, by = "player_id") %>%
mutate(currentElo = ifelse(is.na(currentElo), 1000, ((currentElo - 1000) * 0.85) + 1000),
preseasonElo = currentElo, PA.x = 0) %>%
left_join(b19, by = "player_id") %>%
select(player_id, preseasonElo, currentElo, first_name, last_name, Batting_Team, everything(), -Date)
p19Elo <- data.frame(player_id = unique(RE19$Pitcher_MLB_ID)) %>%
mutate(player_id = as.character(player_id)) %>%
left_join(p18Elo, by = "player_id") %>%
mutate(currentElo = ifelse(is.na(currentElo), 1000, ((currentElo - 1000) * 0.85) + 1000),
preseasonElo = currentElo, BFP.x = 0) %>%
left_join(p19, by = 'player_id') %>%
select(player_id, preseasonElo, currentElo, first_name, last_name, Pitching_Team, everything(), -Date)
# create dt to track playerElo progression
allPlayerElo <- data.table(
playerID = NA,
PA = NA,
playerElo = NA
)
# compute playerElo
for (row in 1:nrow(RE19)) {
# find playerIDs and current playerElo
batterID <- RE19$Batter_MLB_ID[row]
pitcherID <- RE19$Pitcher_MLB_ID[row]
batterElo <- as.numeric(b19Elo$currentElo[which(b19Elo$player_id == batterID)])
pitcherElo <- as.numeric(p19Elo$currentElo[which(p19Elo$player_id == pitcherID)])
# add to plate appearance count
b19Elo$PA.x[which(b19Elo$player_id == batterID)] <-
b19Elo$PA.x[which(b19Elo$player_id == batterID)] + 1
p19Elo$BFP.x[which(p19Elo$player_id == pitcherID)] <-
p19Elo$BFP.x[which(p19Elo$player_id == pitcherID)] + 1
# add playerElo for current at bat count to progression data.table
allPlayerElo <- rbindlist(list(allPlayerElo,
list(batterID,
b19Elo$PA.x[which(b19Elo$player_id == batterID)],
batterElo),
list(pitcherID,
p19Elo$BFP.x[which(p19Elo$player_id == pitcherID)],
pitcherElo))
)
# compute expected runs value for matchup, based on current state and playerElo of batter and pitcher
# stateMatrix coefficients computed by repeatadly running playerElo calculation over the previous three years,
# and finding relationship between playerElo and performance (measured by wOBA and run value) in each base-out state
matrixRow <- which(stateMatrix$State == RE19$State_Before[row])
ex.rv.batter <- (stateMatrix$bA[matrixRow] * batterElo^2) +
(stateMatrix$bB[matrixRow] * batterElo) + stateMatrix$bC[matrixRow]
ex.rv.pitcher <- (stateMatrix$pA[matrixRow] * pitcherElo^2) +
(stateMatrix$pB[matrixRow] * pitcherElo) + stateMatrix$pC[matrixRow]
# add in home field advantage (if applicable)
if (substr(RE19$Inning[row], 2, 2) == 'B') {
ex.rv.batter <- ex.rv.batter + homeAdv
}
# find park factor
park.factor <- parkFactors$Park_Factor[
which(parkFactors$Park == str_sub(RE19$GameID[row], -5, -3))]
# compare expected RV to actual RV and update playerElo accordingly
rv.diff <- RE19$Runs_Value[row] - ((ex.rv.batter + ex.rv.pitcher) / 2) - park.factor
bEloChange <- ((921.675 + (6046.370 * rv.diff) - batterElo) / 502)
pEloChange <- ((965.754 - (4762.089 * rv.diff) - pitcherElo) / 502)
# account for errors only if it still helps pitcher or hurts batter, otherwise disregard
if (RE19$Play_Type[row] != 'FIELD ERROR' || RE19$Play_Type[row] == 'FIELD ERROR' && bEloChange < 0) {
b19Elo$currentElo[which(b19Elo$player_id == batterID)] <- batterElo + bEloChange
}
if (RE19$Play_Type[row] != 'FIELD ERROR' || RE19$Play_Type[row] == 'FIELD ERROR' && pEloChange > 0) {
p19Elo$currentElo[which(p19Elo$player_id == pitcherID)] <- pitcherElo + pEloChange
}
# print completion percentage
if (row %% 1000 == 0) {
print(paste0(round(100 * row / nrow(RE19), 2), "%"))
}
}
# load positions of players
batterStats19 <- read_csv("data/mlb-player-stats-Batters.csv") %>%
separate(Player, into = c("first_name", "last_name"), sep = " ", extra = "merge") %>%
select(first_name, last_name, Pos) %>%
distinct(first_name, last_name, .keep_all= TRUE)
pitcherStats19 <- read_csv("data/mlb-player-stats-P.csv") %>%
separate(Player, into = c("first_name", "last_name"), sep = " ", extra = "merge") %>%
mutate(Pos = ifelse(G - GS < 5 | IP > 65, "SP", "RP")) %>%
select(first_name, last_name, Pos, ERA, WHIP)
# load exit velo stats on players
batterVeloStats19 <- read_csv("data/exit_velocity-2.csv") %>%
mutate(player_id = as.character(player_id)) %>%
rename(EV = avg_hit_speed,
'HH%' = ev95percent) %>%
select(player_id, EV, "HH%")
pitcherVeloStats19 <- read_csv("data/exit_velocity-3.csv") %>%
mutate(player_id = as.character(player_id)) %>%
rename(EV = avg_hit_speed,
'HH%' = ev95percent) %>%
select(player_id, EV, "HH%")
# create new df to describe trends of players
allPlayerX <- allPlayerElo %>%
mutate(PA = PA + 50) %>%
arrange(desc(playerElo)) %>%
distinct(playerID, PA, .keep_all = TRUE) %>%
rename(Trend = playerElo)
# add positions and velo stats, clean data
b19EloX <- b19Elo %>%
arrange(desc(currentElo)) %>%
mutate(Rank = seq.int(nrow(b19Elo))) %>%
left_join(batterStats19, by = c("first_name", "last_name")) %>%
left_join(batterVeloStats19, by = 'player_id') %>%
mutate(currentElo = round(currentElo, 0)) %>%
rename(First_Name = first_name,
Last_Name = last_name,
Team = Batting_Team,
Position = Pos,
PA = pa,
playerElo = currentElo,
wOBA = woba,
xwOBA = est_woba)
# add positions to players whose suffixes pose matching problems (e.g. Ronald Acuna Jr.)
b19EloX$Position[which(b19EloX$player_id == 660670)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 666971)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 670712)] <- "3B"
b19EloX$Position[which(b19EloX$player_id == 592261)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 596105)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 628356)] <- "3B"
# continue to clean and add labels to pitchers, include trend over last 50 PA
b19EloX <- b19EloX %>%
distinct(player_id, .keep_all = TRUE) %>%
drop_na(EV) %>%
mutate(Position = replace_na(Position, "P")) %>%
left_join(allPlayerX, by = c("player_id" = "playerID", "PA")) %>%
mutate(Trend = replace_na(Trend, 1000))
# select columns for display in Shiny App
b19EloDisplay <- b19EloX %>%
unite("Name", First_Name, Last_Name, sep = " ") %>%
mutate(Trend = round(playerElo - Trend, 0)) %>%
select(Name, Team, Position, PA, EV,
"HH%", wOBA, xwOBA, Trend, playerElo)
p19EloX <- p19Elo %>%
arrange(desc(currentElo)) %>%
mutate(Rank = seq.int(nrow(p19Elo))) %>%
left_join(pitcherStats19, by = c("first_name", "last_name")) %>%
left_join(pitcherVeloStats19, by = 'player_id') %>%
mutate(currentElo = round(currentElo, 0)) %>%
rename(First_Name = first_name,
Last_Name = last_name,
Team = Pitching_Team,
Position = Pos,
PA = pa,
playerElo = currentElo,
wOBA = woba,
xwOBA = est_woba)
p19EloX$Position[which(p19EloX$player_id == 592346)] <- "SP"
p19EloX$Position[which(p19EloX$player_id == 605541)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 605479)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 595001)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 641482)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 597113)] <- "RP"
p19EloX <- p19EloX %>%
distinct(player_id, .keep_all = TRUE) %>%
drop_na(EV) %>%
left_join(allPlayerX, by = c("player_id" = "playerID", "PA")) %>%
mutate(Trend = replace_na(Trend, 1000))
p19EloDisplay <- p19EloX %>%
unite("Name", First_Name, Last_Name, sep = " ") %>%
mutate(Trend = round(playerElo - Trend, 0)) %>%
select(Name, Team, Position, PA, EV,
"HH%", wOBA, xwOBA, Trend, playerElo)
standings <- read_csv("data/standings.csv") %>%
separate(pythWL, c("pythW", "pythL"), sep = "-") %>%
arrange(Tm) %>%
filter(Tm != "Avg") %>%
mutate(Tm = c("Arizona Diamondbacks", "Atlanta Braves", "Baltimore Orioles",
"Boston Red Sox", "Chicago Cubs", "Chicago White Sox", "Cincinnati Reds",
"Cleveland Indians", "Colorado Rockies", "Detroit Tigers", "Houston Astros",
"Kansas City Royals", "Los Angeles Angels", "Los Angeles Dodgers", "Miami Marlins",
"Milwaukee Brewers", "Minnesota Twins", "New York Mets", "New York Yankees",
"Oakland Athletics", "Philadelphia Phillies", "Pittsburgh Pirates", "San Diego Padres",
"Seattle Mariners", "San Francisco Giants", "St. Louis Cardinals", "Tampa Bay Rays",
"Texas Rangers", "Toronto Blue Jays", "Washington Nationals"),
pythWPct = round(as.numeric(pythW) / (as.numeric(pythW) + as.numeric(pythL)), 3)) %>%
rename(Team = Tm, WPct = 'W-L%') %>%
select(Team, W, L, WPct, pythWPct)
b19EloTeam <- b19EloX %>%
mutate(eloWeight = playerElo * PA) %>%
group_by(Team) %>%
summarise(TeamBattingElo = sum(eloWeight) / sum(PA)) %>%
drop_na()
p19EloTeam <- p19EloX %>%
mutate(eloWeight = playerElo * PA) %>%
group_by(Team) %>%
summarise(TeamPitchingElo = sum(eloWeight) / sum(PA)) %>%
drop_na()
RS19Team <- RE19 %>%
group_by(Batting_Team) %>%
summarise(Runs_Scored = sum(Runs_OnPlay))
RA19Team <- RE19 %>%
group_by(Pitching_Team) %>%
summarise(Runs_Against = sum(Runs_OnPlay))
eloTeam19 <- b19EloTeam %>%
left_join(p19EloTeam, by = "Team") %>%
left_join(RS19Team, by = c("Team" = "Batting_Team")) %>%
left_join(RA19Team, by = c("Team" = "Pitching_Team")) %>%
left_join(standings, by = "Team")
model <- lm(pythWPct ~ TeamBattingElo + TeamPitchingElo, data = eloTeam19)
eloTeam19 <- eloTeam19 %>%
mutate(aggTeamElo = ((model$coefficients[2] / (model$coefficients[2] + model$coefficients[3])) * TeamBattingElo) +
((model$coefficients[3] / (model$coefficients[2] + model$coefficients[3])) * TeamPitchingElo),
pythWPct = signif(as.numeric(pythWPct), 3),
WPct = signif(as.numeric(WPct), 3),
TeamBattingElo = round(TeamBattingElo, 0),
TeamPitchingElo = round(TeamPitchingElo, 0),
aggTeamElo = round(aggTeamElo, 0)) %>%
arrange(desc(aggTeamElo)) %>%
select(Team, W, L, WPct, pythWPct, Runs_Scored, Runs_Against, TeamBattingElo, TeamPitchingElo, aggTeamElo) %>%
rename('Batting Elo' = TeamBattingElo,
'Pitching Elo' = TeamPitchingElo,
'Team Elo' = aggTeamElo,
'Runs Scored' = Runs_Scored,
'Runs Against' = Runs_Against,
'Pythagorean WPct' = pythWPct,
"Wins" = W,
"Losses" = L)
isolateBNames <- b19Elo %>%
select(player_id, first_name, last_name)
isolatePNames <- p19Elo %>%
select(player_id, first_name, last_name)
allPlayerEloX <- allPlayerElo %>%
slice(1:n()) %>%
left_join(isolateBNames, by = c("playerID" = "player_id")) %>%
left_join(isolatePNames, by = c("playerID" = "player_id")) %>%
mutate(isPitcher = !is.na(last_name.y),
Name = ifelse(isPitcher, paste(first_name.y, last_name.y),
paste(first_name.x, last_name.x))) %>%
arrange(PA) %>%
group_by(playerID, PA) %>%
filter(playerElo == max(playerElo)) %>%
ungroup() %>%
mutate(isPitcher = factor(isPitcher, levels = c(T, F),
labels = c("Pitcher", "Batter"))) %>%
select(playerID, PA, playerElo, Name) %>%
filter(Name != 'NA NA')
write_csv(b19EloDisplay, "data/b19EloDisplay.csv")
write_csv(p19EloDisplay, "data/p19EloDisplay.csv")
write_csv(eloTeam19, "data/eloTeam19.csv")
write_csv(allPlayerEloX, "data/allPlayerEloX.csv")
View(allPlayerX)
View(b19EloX)
View(allPlayerElo)
View(allPlayerX)
View(allPlayerEloX)
View(allPlayerX)
View(allPlayerEloX)
View(RE19)
allElo <- rbind(b19EloDisplay, p19EloDisplay)
View(allElo)
sd(allElo$playerElo)
(1342 - mean(allElo$playerElo)) / sd(allElo$playerElo)
summary(model)
View(eloTeam19)
model2 <- lm('Pythagorean WPct' ~ 'Runs Scored' + 'Runs Against', data = eloTeam19)
model2 <- lm(`Pythagorean WPct` ~ `Runs Scored` + `Runs Against`, data = eloTeam19)
View(model2)
summary(model2)
ggplot(eloTeam19, aes(`Runs Scored`, `Pythagorean WPct`)) + geom_point()
ggplot(eloTeam19, aes(`Runs Against`, `Pythagorean WPct`)) + geom_point()
