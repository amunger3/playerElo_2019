theme(legend.position = "none",
strip.text = element_text(face = "bold", size = 14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 16),
axis.title = element_text(face = "bold"),
axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0.01, 0.01))
require(tidyverse)
require(data.table)
require(formattable)
require(htmltools)
require(webshot)
player_highlight <- c("Darwinzon Hernandez")
player_ids <- player_map$playerID[match(player_highlight, player_map$Name)]
background_data <- filter(positions, !playerID %in% player_ids)
highlight_data <- filter(positions, playerID %in% player_ids)
last_point <- highlight_data %>%
group_by(playerID) %>%
filter(PA == max(PA))
ggplot(background_data) +
geom_path(aes(PA, playerElo, group = playerID), alpha = 0.1) +
geom_path(data = highlight_data, aes(PA, playerElo, group = playerID, color = Name),
size = 1.5) +
geom_hline(data = highlight_data, aes(yintercept = 972.2389), size = 1.2) +
geom_label(data = last_point, aes(PA, playerElo, group = playerID, color = Name,
label = Name), hjust = "inward") +
facet_wrap(.~paste0(isPitcher, "s"), nrow = 2, ncol = 1, scales = "free_x") +
labs(title = "2018-2019 MLB playerElo Progress by Plate Appearance",
x = "Plate Appearance", y = "playerElo Rating") +
theme_classic() +
theme(legend.position = "none",
strip.text = element_text(face = "bold", size = 14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 16),
axis.title = element_text(face = "bold"),
axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0.01, 0.01))
library("XML")
qb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/qb.php", stringsAsFactors = FALSE)$data
qb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/qb.php", stringsAsFactors = FALSE)$data
qb_fp <- readHTMLTable("https://www.fantasypros.com/nfl/rankings/qb-cheatsheets.php", stringsAsFactors = FALSE)$data
qb_fp <- readHTMLTable("https://www.fantasypros.com/nfl/projections/qb.php?week=draft", stringsAsFactors = FALSE)$data
qb_fp <- readHTMLTable("https://www.fantasypros.com/nfl/projections/qb.php?week=draft", stringsAsFactors = FALSE)$data
qb_fp <- readHTMLTable("https://www.fantasypros.com/nfl/projections/qb.php?week=draft")$data
qb_fp <- readHTMLTable("https://www.fantasypros.com/nfl/projections/qb.php?week=draft", stringsAsFactors = FALSE)
shinyApp(ui = ui, server = server)
require(shiny)
require(tidyverse)
require(DT)
require(baseballr)
require(data.table)
shinyApp(ui = ui, server = server)
# load positions of players
batterStats19 <- read_csv("data/mlb-player-stats-Batters.csv") %>%
separate(Player, into = c("first_name", "last_name"), sep = " ", extra = "merge") %>%
select(first_name, last_name, Pos) %>%
distinct(first_name, last_name, .keep_all= TRUE)
pitcherStats19 <- read_csv("data/mlb-player-stats-P.csv") %>%
separate(Player, into = c("first_name", "last_name"), sep = " ", extra = "merge") %>%
mutate(Pos = ifelse(G - GS < 5 | IP > 65, "SP", "RP")) %>%
select(first_name, last_name, Pos, ERA, WHIP)
# load exit velo stats on players
batterVeloStats19 <- read_csv("data/savant-batter-exitvelo-19.csv") %>%
mutate(player_id = as.character(player_id)) %>%
rename(EV = avg_hit_speed,
'HH%' = ev95percent) %>%
select(player_id, EV, "HH%")
pitcherVeloStats19 <- read_csv("data/savant-pitcher-exitvelo-19.csv") %>%
mutate(player_id = as.character(player_id)) %>%
rename(EV = avg_hit_speed,
'HH%' = ev95percent) %>%
select(player_id, EV, "HH%")
# create new df to describe trends of players
allPlayerX <- allPlayerElo %>%
mutate(PA = PA + 50) %>%
arrange(desc(playerElo)) %>%
distinct(playerID, PA, .keep_all = TRUE) %>%
rename(Trend = playerElo)
# add positions and velo stats, clean data
b19EloX <- b19Elo %>%
arrange(desc(currentElo)) %>%
mutate(Rank = seq.int(nrow(b19Elo))) %>%
left_join(batterStats19, by = c("first_name", "last_name")) %>%
left_join(batterVeloStats19, by = 'player_id') %>%
mutate(currentElo = round(currentElo, 0)) %>%
rename(First_Name = first_name,
Last_Name = last_name,
Team = Batting_Team,
Position = Pos,
PA = pa,
playerElo = currentElo,
wOBA = woba,
xwOBA = est_woba)
# add positions to players whose suffixes pose matching problems (e.g. Ronald Acuna Jr.)
b19EloX$Position[which(b19EloX$player_id == 660670)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 666971)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 670712)] <- "3B"
b19EloX$Position[which(b19EloX$player_id == 592261)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 596105)] <- "OF"
b19EloX$Position[which(b19EloX$player_id == 628356)] <- "3B"
# continue to clena and add labels to pitchers, include trend
b19EloX <- b19EloX %>%
distinct(player_id, .keep_all = TRUE) %>%
drop_na(EV) %>%
mutate(Position = replace_na(Position, "P")) %>%
left_join(allPlayerX, by = c("player_id" = "playerID", "PA")) %>%
mutate(Trend = replace_na(Trend, 1000))
# select columns for display
b19EloDisplay <- b19EloX %>%
unite("Name", First_Name, Last_Name, sep = " ") %>%
mutate(Trend = round(playerElo - Trend, 0)) %>%
select(Name, Team, Position, PA, EV,
"HH%", wOBA, xwOBA, Trend, playerElo)
# run same steps for pitchers
p19EloX <- p19Elo %>%
arrange(desc(currentElo)) %>%
mutate(Rank = seq.int(nrow(p19Elo))) %>%
left_join(pitcherStats19, by = c("first_name", "last_name")) %>%
left_join(pitcherVeloStats19, by = 'player_id') %>%
mutate(currentElo = round(currentElo, 0)) %>%
rename(First_Name = first_name,
Last_Name = last_name,
Team = Pitching_Team,
Position = Pos,
PA = pa,
playerElo = currentElo,
wOBA = woba,
xwOBA = est_woba)
p19EloX$Position[which(p19EloX$player_id == 592346)] <- "SP"
p19EloX$Position[which(p19EloX$player_id == 605541)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 605479)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 595001)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 641482)] <- "RP"
p19EloX$Position[which(p19EloX$player_id == 597113)] <- "RP"
p19EloX <- p19EloX %>%
distinct(player_id, .keep_all = TRUE) %>%
drop_na(EV) %>%
left_join(allPlayerX, by = c("player_id" = "playerID", "PA")) %>%
mutate(Trend = replace_na(Trend, 1000))
p19EloDisplay <- p19EloX %>%
unite("Name", First_Name, Last_Name, sep = " ") %>%
mutate(Trend = round(playerElo - Trend, 0)) %>%
select(Name, Team, Position, PA, EV,
"HH%", wOBA, xwOBA, Trend, playerElo)
# load team records from baseballr package
al_records <- data.frame(matrix(unlist(standings_on_date_bref(date = "2019-08-18", division = "AL Overall")),
nrow=15), stringsAsFactors=FALSE) %>%
select("Team" = 1, "W" = 2, "L" = 3, "WPct" = 4, "pythWPct" = 8)
nl_records <- data.frame(matrix(unlist(standings_on_date_bref(date = "2019-08-18", division = "NL Overall")),
nrow=15), stringsAsFactors=FALSE) %>%
select("Team" = 1, "W" = 2, "L" = 3, "WPct" = 4, "pythWPct" = 8)
team_records <- rbind(al_records, nl_records) %>%
arrange(Team)
team_records$Team <- c("Arizona Diamondbacks", "Atlanta Braves", "Baltimore Orioles",
"Boston Red Sox", "Chicago Cubs", "Chicago White Sox", "Cincinnati Reds",
"Cleveland Indians", "Colorado Rockies", "Detroit Tigers", "Houston Astros",
"Kansas City Royals", "Los Angeles Angels", "Los Angeles Dodgers", "Miami Marlins",
"Milwaukee Brewers", "Minnesota Twins", "New York Mets", "New York Yankees",
"Oakland Athletics", "Philadelphia Phillies", "Pittsburgh Pirates", "San Diego Padres",
"Seattle Mariners", "San Francisco Giants", "St. Louis Cardinals", "Tampa Bay Rays",
"Texas Rangers", "Toronto Blue Jays", "Washington Nationals")
# calculate team playerEloand get runs scored / against stats, and summarize in team df
b19EloTeam <- b19EloX %>%
mutate(eloWeight = playerElo * PA) %>%
group_by(Team) %>%
summarise(TeamBattingElo = sum(eloWeight) / sum(PA)) %>%
drop_na()
p19EloTeam <- p19EloX %>%
mutate(eloWeight = playerElo * PA) %>%
group_by(Team) %>%
summarise(TeamPitchingElo = sum(eloWeight) / sum(PA)) %>%
drop_na()
RS19Team <- RE19 %>%
group_by(Batting_Team) %>%
summarise(Runs_Scored = sum(Runs_OnPlay))
RA19Team <- RE19 %>%
group_by(Pitching_Team) %>%
summarise(Runs_Against = sum(Runs_OnPlay))
eloTeam19 <- b19EloTeam %>%
left_join(p19EloTeam, by = "Team") %>%
left_join(RS19Team, by = c("Team" = "Batting_Team")) %>%
left_join(RA19Team, by = c("Team" = "Pitching_Team")) %>%
left_join(team_records, by = "Team")
# create model for pythWPctand team playerElo, and use coefficients to weight batting vs. pitching
model <- lm(pythWPct ~ TeamBattingElo + TeamPitchingElo, data = eloTeam19)
eloTeam19 <- eloTeam19 %>%
mutate(aggTeamElo = ((model$coefficients[2] / (model$coefficients[2] + model$coefficients[3])) * TeamBattingElo) +
((model$coefficients[3] / (model$coefficients[2] + model$coefficients[3])) * TeamPitchingElo),
pythWPct = signif(as.numeric(pythWPct), 3),
WPct = signif(as.numeric(WPct), 3),
TeamBattingElo = round(TeamBattingElo, 0),
TeamPitchingElo = round(TeamPitchingElo, 0),
aggTeamElo = round(aggTeamElo, 0)) %>%
arrange(desc(aggTeamElo)) %>%
select(Team, TeamBattingElo, TeamPitchingElo, aggTeamElo, pythWPct, everything()) %>%
rename('Batting Elo' = TeamBattingElo,
'Pitching Elo' = TeamPitchingElo,
'Team Elo' = aggTeamElo,
'Runs Scored' = Runs_Scored,
'Runs Against' = Runs_Against,
'Pythagorean WPct' = pythWPct,
"Wins" = W,
"Losses" = L)
# clean and modify playerElo progression df, add names and boolean isPitcher variable
isolateBNames <- b19Elo %>%
select(player_id, first_name, last_name)
isolatePNames <- p19Elo %>%
select(player_id, first_name, last_name)
allPlayerEloX <- allPlayerElo %>%
slice(1:n()) %>%
left_join(isolateBNames, by = c("playerID" = "player_id")) %>%
left_join(isolatePNames, by = c("playerID" = "player_id")) %>%
mutate(isPitcher = !is.na(last_name.y),
Name = ifelse(isPitcher, paste(first_name.y, last_name.y),
paste(first_name.x, last_name.x))) %>%
arrange(PA) %>%
group_by(playerID, PA) %>%
filter(playerElo == max(playerElo)) %>%
ungroup() %>%
mutate(isPitcher = factor(isPitcher, levels = c(T, F),
labels = c("Pitcher", "Batter"))) %>%
select(playerID, PA, playerElo, Name) %>%
filter(Name != 'NA NA')
# write ui for shiny app
ui <- fluidPage(
tags$strong(tags$h1("playerElo 2019")),
tags$em(tags$h5("Jacob Richey | University of Pennsylvania | Updated as of August 18th")),
tabsetPanel(
tabPanel("playerElo Ranks",
tags$em(tags$h6("Column Header Notes: EV = Exit Velocity,
HH% = Hard Hit Percentage, Trend = Difference of playerElo 50 PA ago")),
fluidRow(
column(4,
selectInput("pos",
"Position",
c("Batters", "Pitchers", "C", "1B", "2B", "SS", "3B",
"OF", "DH", "SP", "RP"),
"Batters")
),
column(4,
selectInput("team",
"Team",
c("All", "Arizona Diamondbacks", "Atlanta Braves", "Baltimore Orioles",
"Boston Red Sox", "Chicago White Sox", "Chicago Cubs", "Cincinnati Reds",
"Cleveland Indians", "Colorado Rockies", "Detroit Tigers", "Houston Astros",
"Kansas City Royals", "Los Angeles Angels", "Los Angeles Dodgers", "Miami Marlins",
"Milwaukee Brewers", "Minnesota Twins", "New York Yankees", "New York Mets",
"Oakland Athletics", "Philadelphia Phillies", "Pittsburgh Pirates", "San Diego Padres",
"San Francisco Giants", "Seattle Mariners", "St. Louis Cardinals", "Tampa Bay Rays",
"Texas Rangers", "Toronto Blue Jays", "Washington Nationals"))
),
column(4,
selectInput("pa",
">PA",
c(1, 25, 50, 100, 200, 300, 400, 500),
100)
)
), DT::dataTableOutput("playerElo")),
tabPanel("teamElo Ranks",
DT::dataTableOutput("teamElo")),
tabPanel("playerElo Graphically",
selectInput(inputId = "plySelect", label = "Player", choices = allPlayerEloX$Name,
multiple = T, selected = NULL),
tags$em("Please allow a few moments for the graph to update."),
plotOutput("graph", height = 600))
)
)
# write server for shiny app
server <- function(input, output) {
# Filter data based on selections
output$playerElo <- DT::renderDataTable(DT::datatable({
if (input$pos == "Batters") {
data <- b19EloDisplay
} else if (input$pos == "Pitchers") {
data <- p19EloDisplay
} else if (input$pos %in% c("C", "1B", "2B", "SS", "3B", "OF", "DH")) {
data <- b19EloDisplay[b19EloDisplay$Position == input$pos, ]
} else {
data <- p19EloDisplay[p19EloDisplay$Position == input$pos, ]
}
if (input$team != "All") {
data <- data[data$Team == input$team, ]
}
data <- data[data$PA > as.numeric(input$pa), ]
}, options = list(lengthChange = FALSE, pageLength = 100,
columnDefs = list(list(className = 'dt-center', targets = 3:10)))) %>%
formatRound(c("EV", "HH%"), 1) %>%
formatRound(c("wOBA", "xwOBA"), 3))
output$teamElo <-
renderDT({
datatable(eloTeam19, options = list(
lengthChange = FALSE,
pageLength = 30,
columnDefs = list(list(
className = 'dt-center', targets = 2:10
))
)) %>%
formatRound(c("Pythagorean WPct", "WPct"), 3)
})
output$graph <- renderPlot({
player_highlight <- input$plySelect
player_ids <- allPlayerEloX[match(player_highlight, allPlayerEloX$Name), ]
background_data <- filter(allPlayerEloX, !playerID %in% player_ids$playerID)
highlight_data <- filter(allPlayerEloX, playerID %in% player_ids$playerID)
last_point <- highlight_data %>%
group_by(playerID) %>%
filter(PA == max(PA))
graph <- ggplot(background_data) +
geom_path(aes(PA, playerElo, group = playerID), alpha = 0.1) +
geom_path(data = highlight_data, aes(PA, playerElo, group = playerID, color = Name),
size = 1.3) +
geom_hline(data = highlight_data, aes(yintercept = 980), size = 1.1) +
geom_label(data = last_point, aes(PA, playerElo, group = playerID, color = Name,
label = paste(Name, round(playerElo, 0), sep = ": ")), hjust = "inward") +
labs(title = "2018-2019 MLB playerElo Progress by Plate Appearance",
x = "Plate Appearance", y = "playerElo Rating") +
theme_classic() +
theme(legend.position = "none",
strip.text = element_text(face = "bold", size = 10),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 16),
axis.title = element_text(face = "bold"),
axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0.01, 0.01))
graph
})
}
View(ui)
View(ui)
shinyApp(ui = ui, server = server)
?selectInput
setwd("Z:/Penn/CRIM602") # note that R uses forward slash / on all platforms
# Basic math
2+2
1*2*3
(1+2+3-4)/(5*7)
# Basic functions
sqrt(2)
(1+sqrt(5))/2 # golden ratio
2^3
log(2.718281828)
round(2.718281828,3)
# combine things together with c()
c(1,2,3,4,5)
c(1,2,3,4,5)+1
c(1,2,3,4,5)*2
c("CRIM601","CRIM602","CRIM603")
c("yes","no","no",NA,NA,"yes")
# making sequences
1:10
c(1,1,1,1,1,1,1,1,1,1)
rep(1,10)
rep(c(1,2),each=5)
# pairwise addition
1:10 + 2:11
# functions of vector of numbers
#   some functions apply to each element
sqrt(c(1,10,3,6,2,5,8,4,7,9))
(c(1,10,3,6,2,5,8,4,7,9))^2
abs(c(-1,1,-2,2,-3,3))
#   other functions operate on the collection
#   sum
sum(c(1,10,3,6,2,5,8,4,7,9))
#   how many?
length(c(1,10,3,6,2,5,8,4,7,9))
#   cumulative sum
cumsum(c(1,10,3,6,2,5,8,4,7,9))
#   other statistics
mean(c(1,10,3,6,2,5,8,4,7,9))
median(c(1,10,3,6,2,5,8,4,7,9))
var(c(1,10,3,6,2,5,8,4,7,9))
sd(c(1,10,3,6,2,5,8,4,7,9))
# biggest and smallest
max(c(1,10,3,6,2,5,8,4,7,9))
which.max(c(1,10,3,6,2,5,8,4,7,9))
min(c(1,10,3,6,2,5,8,4,7,9))
which.min(c(1,10,3,6,2,5,8,4,7,9))
#   sorting
sort(c(1,10,3,6,2,5,8,4,7,9))
rev(c(1,10,3,6,2,5,8,4,7,9))
rev(sort(c(1,10,3,6,2,5,8,4,7,9)))
sort(c(1,10,3,6,2,5,8,4,7,9),decreasing=TRUE)
#   where is the ith biggest number?
order(c(1,10,3,6,2,5,8,4,7,9))
#   how do I rank compared to others?
rank(c(1,100,3,20))
#  functions work on character strings
my.states <- c("WA","DC","CA","PA","MD","VA","OH")
nchar(my.states)
paste(my.states,", USA")
paste(my.states,", USA",sep="")
paste(my.states, collapse=",")
Class exercises
1. Print all even numbers less than 100
2. What is the standard deviation of even numbers less than 100
3. Have R put in alphabetical order
c("WA","DC","CA","PA","MD","VA","OH")
# assignment
a <- 1
b <- 2+2
a <- a+b
a <- 1:10
b <- 2*a
a+b
sd(a)
state.names <- c("WV","OH","OK","NV","CA","IN","MA","MI","IL","IA","SC","NH",
"LA","GA","CT","WI","CO","NY","UT","AK","MS","AL","OR","MT",
"ND","WY","FL","ME","AZ","TN","PA","MN","NM","SD","MO","RI",
"HI","WA","DE","NJ","NE","KY","AR","TX","NC","MD","VA","VT",
"KS","ID","DC")
# indexing
state.names[1]
state.names[1:3]
state.names[c(1,5,9)]
state.names[2*(1:25)]
#   negative indices drop the element
state.names[-51]
sort(state.names)[1]
i <- order(state.names)
i[1:3]
state.names[i[1:3]]
Class exercises
1. What's the last state in the list?
2. Pick out states that begin with "M" using their indices
3. Pick out states where you have lived.
4. What's the last state in alphabetical order?
5. What are the last three states in alphabetical order?
# boolean
TRUE
FALSE
c(TRUE,FALSE,TRUE,FALSE)
TRUE  && TRUE
FALSE && TRUE
FALSE || TRUE
FALSE || FALSE
6>5
(6>5) || (100<3)
(6>5) && (100<3)
a <- 1:10
a==5
a!=5  # ! means "not"
a<5
a>=5
13 %% 5  # = 3, 13/5 = 2 with remainder 3
a%%2==0
a>5 & a<8  # & means "and"   IMPORTANT use single & or | for vectors
a<3 | a>=7 # | means "or"    otherwise just compares the first values
#  all/any checks whether all/any are TRUE
all(a<11)
all(a>5 & a<8)
any(a>5 & a<8)
#   use booleans for indexing too
i <- a%%2==0
a[i]
#   ! means "not"
a[!i]
i <- state.names!="DC"
state.names[i]
state.names[state.names!="DC"]
#  %in% tests whether something is in a set
a %in% c(3,7,10)
my.states <- c("MD","OH","VA","CA","WA","DC","PA")
i <- state.names %in% my.states
sum(i)
sum(i)==length(my.states)
my.states
state.names
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names[state.names == "WA"]
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names[state.names == "WA"]
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names %in% c("WA")
# 2. With a<-1:100, pick out odd numbers between 50 and 75
a <- 1:100
b <- (a % 2 != 0) && a > 50 && a < 75
b <- a > 50
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names == "WA"
b <- b[a > 50]
a[which(a %% 2 != 0)]
a[which((a %% 2 != 0) && a > 50 && a < 75)]
a[which((a %% 2 != 0) && a > 50)]
a[which((a %% 2 != 0) & a > 50)]
a[which((a %% 2 != 0) & a > 50 & a < 75)]
# Classroom exercises
# 1. Report TRUE or FALSE for each state depending on if you have lived there
state.names == "WA"
a[a > 50 & a < 75]
a[a > 50 & a < 75 & (a %% 2 == 1)]
b18Elo <- read_csv("data/b18Elo.csv", col_types = list(player_id = col_character()))
p18Elo <- read_csv("data/p18Elo.csv", col_types = list(player_id = col_character()))
library(tidyverse)
library(data.table)
setwd("~/Desktop/Jacob/Personal_R/playerElo")
# load previously calculated park factors
parkFactors <- read_csv("data/ParkFactors.csv")
# load calculated ending playerElos for 2018
b18Elo <- read_csv("data/b18Elo.csv", col_types = list(player_id = col_character()))
p18Elo <- read_csv("data/p18Elo.csv", col_types = list(player_id = col_character()))
# load matrix of previously calculated quadratic coefficients to be used in playerElo calculations
stateMatrix <- read.csv("data/stateMatrix.csv")
View(b18Elo)
b19 <- read_csv("data/expected_stats-6.csv") %>%
mutate(player_id = as.character(player_id)) %>%
left_join(teamsIso19b, by = c("player_id" = "Batter_MLB_ID")) %>%
select(first_name, last_name, year, Batting_Team, everything())
p19 <- read_csv("data/expected_stats-7.csv") %>%
mutate(player_id = as.character(player_id)) %>%
left_join(teamsIso19p, by = c("player_id" = "Pitcher_MLB_ID")) %>%
select(first_name, last_name, year, Pitching_Team, everything())
install.packages("styler")
